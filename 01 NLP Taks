01 Split

input : "The brown fox is quick and he is jumping over the lazy dog"

output : ['The', 'brown', 'fox', 'is', 'quick', 'and', 'he', 'is', 'jumping', 'over', 'the', 'lazy', 'dog']

-------------------------------------------------------------------------------------------------------------------------------------------
03 Sentence Tokenize : Split Paragraph into list of Sentences

input : "God is Great! I won a lotter."

output : ['God is Great!', 'I won a lotter.']

-------------------------------------------------------------------------------------------------------------------------------------------
04 Word Tokenize

input : "God is Great! I won a lotter."

output: ['God', 'is', 'Great', '!', 'I', 'won', 'a', 'lotter', '.']

-------------------------------------------------------------------------------------------------------------------------------------------
05 lower

input : "Harry Potter is the most miserable, lonely boy you can imagine."

output: "harry potter is the most miserable , lonely boy you can imagine"

-------------------------------------------------------------------------------------------------------------------------------------------
06 : Vocabulary

input : sentences = [['this', 'is', 'the', 'first', 'sentence', 'for', 'word2vec'],
            	     ['this', 'is', 'the', 'second', 'sentence'],
            	     ['yet', 'another', 'sentence'],
	             ['one', 'more', 'sentence'],
            	     ['and', 'the', 'final', 'sentence']]

output: {is', 'another', 'for', 'the', 'and', 'final', 'yet', 'word2vec', 'second', 'sentence', 'more', 'first', 'one', 'this'}
-------------------------------------------------------------------------------------------------------------------------------------------
07 : CountVectorizer 

input : ["The quick brown fox jumped over the lazy dog."]

{'the': 7, 'quick': 6, 'brown': 0, 'fox': 2, 'jumped': 3, 'over': 5, 'lazy': 4, 'dog': 1}

output: [[1 1 1 1 1 1 1 2]]

-------------------------------------------------------------------------------------------------------------------------------------------
08 :Remove digits

input : There was 200 people standing right next to me at 2pm.

output: There was  people standing right next to me at pm

-------------------------------------------------------------------------------------------------------------------------------------------
09 : IfIdf

input :["earth is the third planet from the sun",
        "Jupiter is the largest"]

output:

matrix([[0.36439074, 0.36439074, 0.25926702, 0.        , 0.	,
         0.36439074, 0.36439074, 0.51853403, 0.36439074],
        [0.        , 0.        , 0.40993715, 0.57615236, 0.57615236,
         0.        , 0.        , 0.40993715, 0.        ]])


-------------------------------------------------------------------------------------------------------------------------------------------
10 : N Gram (n=2) : Bigram

input : 'this is a sample tex'

output: [['this', 'is'], ['is', 'a'], ['a', 'sample'], ['sample', 'text']]

-------------------------------------------------------------------------------------------------------------------------------------------
11 : N Gram (n=3) : Trigram

input : 'this is a sample tex'

output: [['this', 'is', 'a'], ['is', 'a', 'sample'], ['a', 'sample', 'text']]

-------------------------------------------------------------------------------------------------------------------------------------------
12 : Sequence from list

input : [24,34,1,9,56,76,90,11,67,54,14]

output :
	[24]
	[24, 34]
	[24, 34, 1]
	[24, 34, 1, 9]
	[24, 34, 1, 9, 56]
	[24, 34, 1, 9, 56, 76]
	[24, 34, 1, 9, 56, 76, 90]
	[24, 34, 1, 9, 56, 76, 90, 11]
	[24, 34, 1, 9, 56, 76, 90, 11, 67]
	[24, 34, 1, 9, 56, 76, 90, 11, 67, 54]
	[24, 34, 1, 9, 56, 76, 90, 11, 67, 54, 14]

-------------------------------------------------------------------------------------------------------------------------------------------
13 : Pad Sequence (pre)

input :
	[24]
	[24, 34]
	[24, 34, 1]
	[24, 34, 1, 9]
	[24, 34, 1, 9, 56]
	[24, 34, 1, 9, 56, 76]
	[24, 34, 1, 9, 56, 76, 90]
	[24, 34, 1, 9, 56, 76, 90, 11]
	[24, 34, 1, 9, 56, 76, 90, 11, 67]
	[24, 34, 1, 9, 56, 76, 90, 11, 67, 54]
	[24, 34, 1, 9, 56, 76, 90, 11, 67, 54, 14]

output :
       [[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 34],
       [ 0,  0,  0,  0,  0,  0,  0,  0, 24, 34,  1],
       [ 0,  0,  0,  0,  0,  0,  0, 24, 34,  1,  9],
       [ 0,  0,  0,  0,  0,  0, 24, 34,  1,  9, 56],
       [ 0,  0,  0,  0,  0, 24, 34,  1,  9, 56, 76],
       [ 0,  0,  0,  0, 24, 34,  1,  9, 56, 76, 90],
       [ 0,  0,  0, 24, 34,  1,  9, 56, 76, 90, 11],
       [ 0,  0, 24, 34,  1,  9, 56, 76, 90, 11, 67],
       [ 0, 24, 34,  1,  9, 56, 76, 90, 11, 67, 54],
       [24, 34,  1,  9, 56, 76, 90, 11, 67, 54, 14]]

-------------------------------------------------------------------------------------------------------------------------------------------
14 : Pad Sequence (post)

input :
	[24]
	[24, 34]
	[24, 34, 1]
	[24, 34, 1, 9]
	[24, 34, 1, 9, 56]
	[24, 34, 1, 9, 56, 76]
	[24, 34, 1, 9, 56, 76, 90]
	[24, 34, 1, 9, 56, 76, 90, 11]
	[24, 34, 1, 9, 56, 76, 90, 11, 67]
	[24, 34, 1, 9, 56, 76, 90, 11, 67, 54]
	[24, 34, 1, 9, 56, 76, 90, 11, 67, 54, 14]

output :
       [[24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [24, 34,  0,  0,  0,  0,  0,  0,  0,  0,  0],
       [24, 34,  1,  0,  0,  0,  0,  0,  0,  0,  0],
       [24, 34,  1,  9,  0,  0,  0,  0,  0,  0,  0],
       [24, 34,  1,  9, 56,  0,  0,  0,  0,  0,  0],
       [24, 34,  1,  9, 56, 76,  0,  0,  0,  0,  0],
       [24, 34,  1,  9, 56, 76, 90,  0,  0,  0,  0],
       [24, 34,  1,  9, 56, 76, 90, 11,  0,  0,  0],
       [24, 34,  1,  9, 56, 76, 90, 11, 67,  0,  0],
       [24, 34,  1,  9, 56, 76, 90, 11, 67, 54,  0],
       [24, 34,  1,  9, 56, 76, 90, 11, 67, 54, 14]]
-------------------------------------------------------------------------------------------------------------------------------------------
: Truncate sequence (maxlen=2 and truncating='pre')

input:
      [['3', '18', '9', '3', '11', '5', '20'],
       ['3', '8', '1', '12'],
       ['18', '1', '8', '1'],
       ['8', '1', '9', '14'],
       ['25', '1', '8', '1'],
       ['9','3']]

output:
	[[ 5 20]
	 [ 1 12]
	 [ 8  1]
	 [ 9 14]
	 [ 8  1]
	 [ 9  3]]

-------------------------------------------------------------------------------------------------------------------------------------------
: Truncate sequence (maxlen=2 and truncating='post')

input:
      [['3', '18', '9', '3', '11', '5', '20'],
       ['3', '8', '1', '12'],
       ['18', '1', '8', '1'],
       ['8', '1', '9', '14'],
       ['25', '1', '8', '1'],
       ['9','3']]

output:
	[[ 3 18]
	 [ 3  8]
	 [18  1]
	 [ 8  1]
	 [25  1]
	 [9  3]]

-------------------------------------------------------------------------------------------------------------------------------------------
13 : Frequency Distribution

input :
       text = '''Data are individual units of information.A datum describes a single quality or quantity of some object or phenomenon. In analytical processes, data are represented by variables. Although the terms'''

output :
        Keys:
        ['Data', 'are', 'individual', 'units', 'of', 'information.', 'A', 'datum', 'describes', 'a', 'single', 'quality', 'or', 'quantity', 'some', 'object', 'phenomenon.', 'In', 'analytical', 'processes,', 'd', 'ata', 'represented', 'by', 'variables.', 'Although', 'the', 'terms']

values:
        [1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

-------------------------------------------------------------------------------------------------------------------------------------------
14 : Word Fequency / Word Count

input :
      'Monty Python ! And the holy Grail ! \n'

output :
      {'Monty': 1, 'Python': 1, '!': 2, 'And': 1, 'the': 1, 'holy': 1, 'Grail': 1}
-------------------------------------------------------------------------------------------------------------------------------------------
15 : Word Index

input :
        sentences = ["this is the first sentence for word2vec",
                     "this is the second sentence",
                     "yet another sentence",
                     "one more sentence",
                     "and the final sentence"]

output :
        {'this': 1, 'another': 2, 'final': 3, 'word2vec': 4, 'second': 5, 'for': 6, 'and': 7, 'one': 8, 'the': 9, 'sentence': 10, 'yet': 11, 'is': 12, 'more': 13, 'first': 14}
-------------------------------------------------------------------------------------------------------------------------------------------
16 : Replace

input :


output :
-------------------------------------------------------------------------------------------------------------------------------------------
17 : Union

input :
        document1 = ['Hi', 'How','are','You', 'I','am']
        document2 = ['Hello','I','am','fine','How','about','You']

output :
        Union: {'How', 'I', 'am', 'You'}
-------------------------------------------------------------------------------------------------------------------------------------------

18 : Intersection

input :
        document1 = ['Hi', 'How','are','You', 'I','am']
        document2 = ['Hello','I','am','fine','How','about','You']

output :
        Intersection {'How', 'fine', 'about', 'are', 'I', 'You', 'Hi', 'Hello', 'am'}
-------------------------------------------------------------------------------------------------------------------------------------------
19 : Sequences to Matrix (mode = binary and num_words = 10)

input :
      [[1,2,3,4],
       [4,5,],
       [6,7,8]]
output :
	      [[0., 1., 1., 1., 1., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 1., 1., 1., 0.]]

-------------------------------------------------------------------------------------------------------------------------------------------
20 : Sequences to Matrix (mode = count and num_words = 10)

input :
      [[1,2,3,4,4],
       [4,5,],
       [6,7,8]]
output :
	      [[0., 1., 1., 1., 2., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 1., 1., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 1., 1., 1., 0.]]


-------------------------------------------------------------------------------------------------------------------------------------------

21 : Sequences to Matrix (mode = freq and num_words = 10)

input :
	    [[1,2,3,4,4],
	     [4,5,],
       [6,7,8]]
output :
	      [0.        , 0.2       , 0.2       , 0.2       , 0.4       , 0.        , 0.        , 0.        , 0.        , 0.],
        [0.        , 0.        , 0.        , 0.        , 0.5       ,0.5       , 0.        , 0.        , 0.        , 0.],
        [0.        , 0.        , 0.        , 0.        , 0.        ,0.        , 0.33333333, 0.33333333, 0.33333333, 0.]]

-------------------------------------------------------------------------------------------------------------------------------------------

: Text to int

input :
      ['king james bible',
       'old testament king james bible',
       'first book moses called genesis',
       'beginning god created heaven earth',
       'earth without form void darkness upon face deep',
       'spirit god moved upon face waters',
       'god said let light light',
       'god saw light good god divided light darkness',
       'god called light day darkness called night',
       'evening morning first day']

Output:
      [[5, 6, 7],
       [13, 14, 5, 6, 7],
       [8, 15, 16, 3, 17],
       [18, 1, 19, 20, 9],
       [9, 21, 22, 23, 4, 10, 11, 24],
       [25, 1, 26, 10, 11, 27],
       [1, 28, 29, 2, 2],
       [1, 30, 2, 31, 1, 32, 2, 4],
       [1, 3, 2, 12, 4, 3, 33],
       [34, 35, 8, 12]]

-------------------------------------------------------------------------------------------------------------------------------------------
: CBOW

input :
      [['beginning', 'god', 'created', 'heaven', 'earth'],
       ['earth', 'without', 'form', 'void', 'darkness', 'upon', 'face', 'deep'],
       ['spirit', 'god', 'moved', 'upon', 'face', 'waters']]

Output : 
	       input: [['god', 'created']]  output: ['beginning']
         input: [['beginning', 'created', 'heaven']]  output: ['god']
         input: [['beginning', 'god', 'heaven', 'earth']]  output: ['created']
         input: [['god', 'created', 'earth']]  output: ['heaven']
         input: [['created', 'heaven']]  output: ['earth']
         input: [['without', 'form']]  output: ['earth']
         input: [['earth', 'form', 'void']]  output: ['without']
         input: [['earth', 'without', 'void', 'darkness']]  output: ['form']
         input: [['without', 'form', 'darkness', 'upon']]  output: ['void']
         input: [['form', 'void', 'upon', 'face']]  output: ['darkness']
         input: [['void', 'darkness', 'face', 'deep']]  output: ['upon']
         input: [['darkness', 'upon', 'deep']]  output: ['face']
         input: [['upon', 'face']]  output: ['deep']
         input: [['god', 'moved']]  output: ['spirit']
         input: [['spirit', 'moved', 'upon']]  output: ['god']
         input: [['spirit', 'god', 'upon', 'face']]  output: ['moved']
         input: [['god', 'moved', 'face', 'waters']]  output: ['upon']
         input: [['moved', 'upon', 'waters']]  output: ['face']
         input: [['upon', 'face']]  output: ['waters']

         input: [[0 0 0 0 0 1 6]]  output: [[0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 5 6 7]]  output: [[0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 5 1 7 2]]  output: [[0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 1 6 2]]  output: [[0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 0 6 7]]  output: [[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 0 8 9]]  output: [[0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 2  9 10]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 2 8 10 11]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 8 9 11 3]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 9 10 3 4]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]]
         input: [[0 0 0 10 11 4 12]]  output: [[0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 11 3 12]]  output: [[0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 0 3 4]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0.]]
         input: [[0 0 0 0 0 1 14]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]]
         input: [[0 0 0 0 13 14 3]]  output: [[0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 13 1 3  4]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]]
         input: [[0 0 0 1 14 4 15]]  output: [[0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 14 3 15]]  output: [[0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]
         input: [[0 0 0 0 0 3 4]]  output: [[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]]
-------------------------------------------------------------------------------------------------------------------------------------------
